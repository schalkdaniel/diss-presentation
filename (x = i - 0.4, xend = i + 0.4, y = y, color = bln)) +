geom_segment              package:ggplot2              R Documentation

_L_i_n_e _s_e_g_m_e_n_t_s _a_n_d _c_u_r_v_e_s

_D_e_s_c_r_i_p_t_i_o_n:

     'geom_segment()' draws a straight line between points (x, y) and
     (xend, yend). 'geom_curve()' draws a curved line. See the
     underlying drawing function 'grid::curveGrob()' for the parameters
     that control the curve.

_U_s_a_g_e:

     geom_segment(
       mapping = NULL,
       data = NULL,
       stat = "identity",
       position = "identity",
       ...,
       arrow = NULL,
       arrow.fill = NULL,
       lineend = "butt",
       linejoin = "round",
       na.rm = FALSE,
       show.legend = NA,
       inherit.aes = TRUE
     )
     
     geom_curve(
       mapping = NULL,
       data = NULL,
       stat = "identity",
       position = "identity",
       ...,
       curvature = 0.5,
       angle = 90,
       ncp = 5,
       arrow = NULL,
       arrow.fill = NULL,
       lineend = "butt",
       na.rm = FALSE,
       show.legend = NA,
       inherit.aes = TRUE
     )
     
_A_r_g_u_m_e_n_t_s:

 mapping: Set of aesthetic mappings created by 'aes()'. If specified
          and 'inherit.aes = TRUE' (the default), it is combined with
          the default mapping at the top level of the plot. You must
          supply 'mapping' if there is no plot mapping.

    data: The data to be displayed in this layer. There are three
          options:

          If 'NULL', the default, the data is inherited from the plot
          data as specified in the call to 'ggplot()'.

          A 'data.frame', or other object, will override the plot data.
          All objects will be fortified to produce a data frame. See
          'fortify()' for which variables will be created.

          A 'function' will be called with a single argument, the plot
          data. The return value must be a 'data.frame', and will be
          used as the layer data. A 'function' can be created from a
          'formula' (e.g. '~ head(.x, 10)').

    stat: The statistical transformation to use on the data for this
          layer, either as a 'ggproto' 'Geom' subclass or as a string
          naming the stat stripped of the 'stat_' prefix (e.g.
          '"count"' rather than '"stat_count"')

position: Position adjustment, either as a string naming the adjustment
          (e.g. '"jitter"' to use 'position_jitter'), or the result of
          a call to a position adjustment function. Use the latter if
          you need to change the settings of the adjustment.

     ...: Other arguments passed on to 'layer()'. These are often
          aesthetics, used to set an aesthetic to a fixed value, like
          'colour = "red"' or 'size = 3'. They may also be parameters
          to the paired geom/stat.

   arrow: specification for arrow heads, as created by 'grid::arrow()'.

arrow.fill: fill colour to use for the arrow head (if closed). 'NULL'
          means use 'colour' aesthetic.

 lineend: Line end style (round, butt, square).

linejoin: Line join style (round, mitre, bevel).

   na.rm: If 'FALSE', the default, missing values are removed with a
          warning. If 'TRUE', missing values are silently removed.

show.legend: logical. Should this layer be included in the legends?
          'NA', the default, includes if any aesthetics are mapped.
          'FALSE' never includes, and 'TRUE' always includes. It can
          also be a named logical vector to finely select the
          aesthetics to display.

inherit.aes: If 'FALSE', overrides the default aesthetics, rather than
          combining with them. This is most useful for helper functions
          that define both data and aesthetics and shouldn't inherit
          behaviour from the default plot specification, e.g.
          'borders()'.

curvature: A numeric value giving the amount of curvature.  Negative
          values produce left-hand curves, positive values produce
          right-hand curves, and zero produces a straight line.

   angle: A numeric value between 0 and 180, giving an amount to skew
          the control points of the curve.  Values less than 90 skew
          the curve towards the start point and values greater than 90
          skew the curve towards the end point.

     ncp: The number of control points used to draw the curve.  More
          control points creates a smoother curve.

_D_e_t_a_i_l_s:

     Both geoms draw a single segment/curve per case. See 'geom_path()'
     if you need to connect points across multiple cases.

_A_e_s_t_h_e_t_i_c_s:

     'geom_segment()' understands the following aesthetics (required
     aesthetics are in bold):

        • *'x'*

        • *'y'*

        • *'xend'*

        • *'yend'*

        • 'alpha'

        • 'colour'

        • 'group'

        • 'linetype'

        • 'linewidth'

     Learn more about setting these aesthetics in
     'vignette("ggplot2-specs")'.

_S_e_e _A_l_s_o:

     'geom_path()' and 'geom_line()' for multi- segment lines and
     paths.

     'geom_spoke()' for a segment parameterised by a location (x, y),
     and an angle and radius.

_E_x_a_m_p_l_e_s:

     b <- ggplot(mtcars, aes(wt, mpg)) +
       geom_point()
     
     df <- data.frame(x1 = 2.62, x2 = 3.57, y1 = 21.0, y2 = 15.0)
     b +
      geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "curve"), data = df) +
      geom_segment(aes(x = x1, y = y1, xend = x2, yend = y2, colour = "segment"), data = df)
     
     b + geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2), data = df, curvature = -0.2)
     b + geom_curve(aes(x = x1, y = y1, xend = x2, yend = y2), data = df, curvature = 1)
     b + geom_curve(
       aes(x = x1, y = y1, xend = x2, yend = y2),
       data = df,
       arrow = arrow(length = unit(0.03, "npc"))
     )
     
     if (requireNamespace('maps', quietly = TRUE)) {
     ggplot(seals, aes(long, lat)) +
       geom_segment(aes(xend = long + delta_long, yend = lat + delta_lat),
         arrow = arrow(length = unit(0.1,"cm"))) +
       borders("state")
     }
     
     # Use lineend and linejoin to change the style of the segments
     df2 <- expand.grid(
       lineend = c('round', 'butt', 'square'),
       linejoin = c('round', 'mitre', 'bevel'),
       stringsAsFactors = FALSE
     )
     df2 <- data.frame(df2, y = 1:9)
     ggplot(df2, aes(x = 1, y = y, xend = 2, yend = y, label = paste(lineend, linejoin))) +
       geom_segment(
          lineend = df2$lineend, linejoin = df2$linejoin,
          size = 3, arrow = arrow(length = unit(0.3, "inches"))
       ) +
       geom_text(hjust = 'outside', nudge_x = -0.2) +
       xlim(0.5, 2)
     
     # You can also use geom_segment to recreate plot(type = "h") :
     set.seed(1)
     counts <- as.data.frame(table(x = rpois(100,5)))
     counts$x <- as.numeric(as.character(counts$x))
     with(counts, plot(x, Freq, type = "h", lwd = 10))
     
     ggplot(counts, aes(x, Freq)) +
       geom_segment(aes(xend = x, yend = 0), linewidth = 10, lineend = "butt")
     

